

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Oct 28 14:55:39 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F690
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 12/10/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F690 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001C                     	;# 
    82     001D                     	;# 
    83     001E                     	;# 
    84     001F                     	;# 
    85     0081                     	;# 
    86     0085                     	;# 
    87     0086                     	;# 
    88     0087                     	;# 
    89     008C                     	;# 
    90     008D                     	;# 
    91     008E                     	;# 
    92     008F                     	;# 
    93     0090                     	;# 
    94     0092                     	;# 
    95     0093                     	;# 
    96     0093                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0095                     	;# 
   100     0095                     	;# 
   101     0096                     	;# 
   102     0096                     	;# 
   103     0097                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009A                     	;# 
   107     009B                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     010C                     	;# 
   111     010C                     	;# 
   112     010D                     	;# 
   113     010E                     	;# 
   114     010F                     	;# 
   115     0115                     	;# 
   116     0116                     	;# 
   117     0118                     	;# 
   118     0119                     	;# 
   119     011A                     	;# 
   120     011B                     	;# 
   121     011E                     	;# 
   122     011F                     	;# 
   123     018C                     	;# 
   124     018D                     	;# 
   125     019D                     	;# 
   126     019E                     	;# 
   127     0000                     	;# 
   128     0001                     	;# 
   129     0002                     	;# 
   130     0003                     	;# 
   131     0004                     	;# 
   132     0005                     	;# 
   133     0006                     	;# 
   134     0007                     	;# 
   135     000A                     	;# 
   136     000B                     	;# 
   137     000C                     	;# 
   138     000D                     	;# 
   139     000E                     	;# 
   140     000E                     	;# 
   141     000F                     	;# 
   142     0010                     	;# 
   143     0011                     	;# 
   144     0012                     	;# 
   145     0013                     	;# 
   146     0014                     	;# 
   147     0015                     	;# 
   148     0015                     	;# 
   149     0016                     	;# 
   150     0017                     	;# 
   151     0018                     	;# 
   152     0019                     	;# 
   153     001A                     	;# 
   154     001C                     	;# 
   155     001D                     	;# 
   156     001E                     	;# 
   157     001F                     	;# 
   158     0081                     	;# 
   159     0085                     	;# 
   160     0086                     	;# 
   161     0087                     	;# 
   162     008C                     	;# 
   163     008D                     	;# 
   164     008E                     	;# 
   165     008F                     	;# 
   166     0090                     	;# 
   167     0092                     	;# 
   168     0093                     	;# 
   169     0093                     	;# 
   170     0093                     	;# 
   171     0094                     	;# 
   172     0095                     	;# 
   173     0095                     	;# 
   174     0096                     	;# 
   175     0096                     	;# 
   176     0097                     	;# 
   177     0098                     	;# 
   178     0099                     	;# 
   179     009A                     	;# 
   180     009B                     	;# 
   181     009E                     	;# 
   182     009F                     	;# 
   183     010C                     	;# 
   184     010C                     	;# 
   185     010D                     	;# 
   186     010E                     	;# 
   187     010F                     	;# 
   188     0115                     	;# 
   189     0116                     	;# 
   190     0118                     	;# 
   191     0119                     	;# 
   192     011A                     	;# 
   193     011B                     	;# 
   194     011E                     	;# 
   195     011F                     	;# 
   196     018C                     	;# 
   197     018D                     	;# 
   198     019D                     	;# 
   199     019E                     	;# 
   200     0006                     _PORTBbits	set	6
   201     0007                     _PORTCbits	set	7
   202     001E                     _ADRESH	set	30
   203     001F                     _ADCON0bits	set	31
   204     0086                     _TRISBbits	set	134
   205     0087                     _TRISCbits	set	135
   206     009E                     _ADRESL	set	158
   207     009F                     _ADCON1bits	set	159
   208     0085                     _TRISAbits	set	133
   209     011E                     _ANSELbits	set	286
   210     011F                     _ANSELH	set	287
   211     011E                     _ANSEL	set	286
   212                           
   213                           	psect	cinit
   214     07FB                     start_initialization:	
   215                           ; #config settings
   216                           
   217     07FB                     __initialization:
   218                           
   219                           ; Clear objects allocated to COMMON
   220     07FB  01FC               	clrf	__pbssCOMMON& (0+127)
   221     07FC  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   222     07FD                     end_of_initialization:	
   223                           ;End of C runtime variable initialization code
   224                           
   225     07FD                     __end_of__initialization:
   226     07FD  0183               	clrf	3
   227     07FE  118A  2EE7         	ljmp	_main	;jump to C main() function
   228                           
   229                           	psect	bssCOMMON
   230     007C                     __pbssCOMMON:
   231     007C                     dequeue@F1642:
   232     007C                     	ds	2
   233                           
   234                           	psect	cstackCOMMON
   235     0070                     __pcstackCOMMON:
   236     0070                     ?_initQueue:
   237     0070                     ??_initQueue:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_ADC_Init:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ??_ADC_Init:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?_sendParallelData:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_isQueueFull:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_isQueueEmpty:	
   256                           ; 2 bytes @ 0x0
   257                           
   258     0070                     ?_ADC_Read:	
   259                           ; 2 bytes @ 0x0
   260                           
   261     0070                     initQueue@q:	
   262                           ; 2 bytes @ 0x0
   263                           
   264     0070                     sendParallelData@data:	
   265                           ; 1 bytes @ 0x0
   266                           
   267                           
   268                           ; 2 bytes @ 0x0
   269     0070                     	ds	2
   270     0072                     ??_isQueueFull:
   271     0072                     ??_isQueueEmpty:	
   272                           ; 1 bytes @ 0x2
   273                           
   274     0072                     ??_ADC_Read:	
   275                           ; 1 bytes @ 0x2
   276                           
   277     0072                     ??_sendParallelData:	
   278                           ; 1 bytes @ 0x2
   279                           
   280     0072                     ADC_Read@result:	
   281                           ; 1 bytes @ 0x2
   282                           
   283                           
   284                           ; 2 bytes @ 0x2
   285     0072                     	ds	4
   286     0076                     isQueueFull@q:
   287     0076                     isQueueEmpty@q:	
   288                           ; 1 bytes @ 0x6
   289                           
   290                           
   291                           ; 1 bytes @ 0x6
   292     0076                     	ds	1
   293     0077                     ?_enqueue:
   294     0077                     ?_dequeue:	
   295                           ; 1 bytes @ 0x7
   296                           
   297     0077                     enqueue@data:	
   298                           ; 2 bytes @ 0x7
   299                           
   300                           
   301                           ; 2 bytes @ 0x7
   302     0077                     	ds	2
   303     0079                     enqueue@q:
   304     0079                     dequeue@data:	
   305                           ; 1 bytes @ 0x9
   306                           
   307                           
   308                           ; 2 bytes @ 0x9
   309     0079                     	ds	2
   310     007B                     dequeue@q:
   311                           
   312                           ; 1 bytes @ 0xB
   313     007B                     	ds	1
   314     007C                     ??_main:
   315                           
   316                           	psect	cstackBANK0
   317     0020                     __pcstackBANK0:	
   318                           ; 1 bytes @ 0xC
   319                           
   320     0020                     ??_enqueue:
   321     0020                     ??_dequeue:	
   322                           ; 1 bytes @ 0x0
   323                           
   324                           
   325                           ; 1 bytes @ 0x0
   326     0020                     	ds	6
   327     0026                     main@adcValue:
   328                           
   329                           ; 2 bytes @ 0x6
   330     0026                     	ds	2
   331     0028                     main@data:
   332                           
   333                           ; 2 bytes @ 0x8
   334     0028                     	ds	2
   335     002A                     main@adcQueue:
   336                           
   337                           ; 38 bytes @ 0xA
   338     002A                     	ds	38
   339                           
   340                           	psect	maintext
   341     06E7                     __pmaintext:	
   342 ;;
   343 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   344 ;;
   345 ;; *************** function _main *****************
   346 ;; Defined at:
   347 ;;		line 125 in file "newmain.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;		None
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  data            2    8[BANK0 ] struct .
   352 ;;  adcValue        2    6[BANK0 ] struct .
   353 ;;  adcQueue       38   10[BANK0 ] struct .
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : B00/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   363 ;;      Params:         0       0       0       0
   364 ;;      Locals:         0      42       0       0
   365 ;;      Temps:          0       0       0       0
   366 ;;      Totals:         0      42       0       0
   367 ;;Total ram usage:       42 bytes
   368 ;; Hardware stack levels required when called: 2
   369 ;; This function calls:
   370 ;;		_ADC_Init
   371 ;;		_ADC_Read
   372 ;;		_dequeue
   373 ;;		_enqueue
   374 ;;		_initQueue
   375 ;;		_isQueueEmpty
   376 ;;		_isQueueFull
   377 ;;		_sendParallelData
   378 ;; This function is called by:
   379 ;;		Startup code after reset
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383     06E7                     _main:	
   384                           ;psect for function _main
   385                           
   386     06E7                     l758:	
   387                           ;incstack = 0
   388                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   389                           
   390                           
   391                           ;newmain.c: 126:     ADC_Init();
   392     06E7  118A  2635  118A   	fcall	_ADC_Init
   393     06EA                     l760:
   394                           
   395                           ;newmain.c: 127:     CircularQueue adcQueue;;newmain.c: 128:     initQueue(&adcQueue);
   396     06EA  302A               	movlw	(low (main@adcQueue| 0))& (0+255)
   397     06EB  118A  25ED  118A   	fcall	_initQueue
   398     06EE                     l762:
   399                           
   400                           ;newmain.c: 130:     TRISCbits.TRISC0 = 0;
   401     06EE  1683               	bsf	3,5	;RP0=1, select bank1
   402     06EF  1303               	bcf	3,6	;RP1=0, select bank1
   403     06F0  1007               	bcf	7,0	;volatile
   404     06F1                     l764:
   405                           
   406                           ;newmain.c: 131:     TRISCbits.TRISC1 = 0;
   407     06F1  1087               	bcf	7,1	;volatile
   408     06F2                     l766:
   409                           
   410                           ;newmain.c: 132:     TRISCbits.TRISC2 = 0;
   411     06F2  1107               	bcf	7,2	;volatile
   412     06F3                     l768:
   413                           
   414                           ;newmain.c: 133:     TRISCbits.TRISC5 = 0;
   415     06F3  1287               	bcf	7,5	;volatile
   416     06F4                     l770:
   417                           
   418                           ;newmain.c: 134:     TRISCbits.TRISC4 = 0;
   419     06F4  1207               	bcf	7,4	;volatile
   420     06F5                     l772:
   421                           
   422                           ;newmain.c: 135:     TRISCbits.TRISC3 = 0;
   423     06F5  1187               	bcf	7,3	;volatile
   424     06F6                     l774:
   425                           
   426                           ;newmain.c: 136:     TRISCbits.TRISC6 = 0;
   427     06F6  1307               	bcf	7,6	;volatile
   428     06F7                     l776:
   429                           
   430                           ;newmain.c: 137:     TRISCbits.TRISC7 = 0;
   431     06F7  1387               	bcf	7,7	;volatile
   432     06F8                     l778:
   433                           
   434                           ;newmain.c: 138:     TRISBbits.TRISB4 = 0;
   435     06F8  1206               	bcf	6,4	;volatile
   436     06F9                     l780:
   437                           
   438                           ;newmain.c: 139:     TRISBbits.TRISB5 = 0;
   439     06F9  1286               	bcf	6,5	;volatile
   440     06FA                     l782:
   441                           
   442                           ;newmain.c: 141:     TRISBbits.TRISB7 = 0;
   443     06FA  1386               	bcf	6,7	;volatile
   444     06FB                     l784:
   445                           
   446                           ;newmain.c: 142:     TRISBbits.TRISB6 = 1;
   447     06FB  1706               	bsf	6,6	;volatile
   448     06FC                     l786:
   449                           
   450                           ;newmain.c: 144:     PORTBbits.RB7 = 0;
   451     06FC  1283               	bcf	3,5	;RP0=0, select bank0
   452     06FD  1303               	bcf	3,6	;RP1=0, select bank0
   453     06FE  1386               	bcf	6,7	;volatile
   454     06FF                     l788:
   455                           
   456                           ;newmain.c: 147:         if (!isQueueFull(&adcQueue)) {
   457     06FF  302A               	movlw	(low (main@adcQueue| 0))& (0+255)
   458     0700  118A  261B  118A   	fcall	_isQueueFull
   459     0703  0870               	movf	?_isQueueFull,w
   460     0704  0471               	iorwf	?_isQueueFull+1,w
   461     0705  1D03               	btfss	3,2
   462     0706  2F08               	goto	u281
   463     0707  2F09               	goto	u280
   464     0708                     u281:
   465     0708  2F1A               	goto	l794
   466     0709                     u280:
   467     0709                     l790:
   468                           
   469                           ;newmain.c: 148:             adcData adcValue = ADC_Read();
   470     0709  118A  25DB  118A   	fcall	_ADC_Read
   471     070C  0871               	movf	?_ADC_Read+1,w
   472     070D  1283               	bcf	3,5	;RP0=0, select bank0
   473     070E  1303               	bcf	3,6	;RP1=0, select bank0
   474     070F  00A7               	movwf	main@adcValue+1
   475     0710  0870               	movf	?_ADC_Read,w
   476     0711  00A6               	movwf	main@adcValue
   477     0712                     l792:
   478                           
   479                           ;newmain.c: 149:             enqueue(&adcQueue, adcValue);
   480     0712  0827               	movf	main@adcValue+1,w
   481     0713  00F8               	movwf	enqueue@data+1
   482     0714  0826               	movf	main@adcValue,w
   483     0715  00F7               	movwf	enqueue@data
   484     0716  302A               	movlw	(low (main@adcQueue| 0))& (0+255)
   485     0717  118A  2651  118A   	fcall	_enqueue
   486     071A                     l794:
   487                           
   488                           ;newmain.c: 151:         if(PORTBbits.RB6 == 1){
   489     071A  1283               	bcf	3,5	;RP0=0, select bank0
   490     071B  1303               	bcf	3,6	;RP1=0, select bank0
   491     071C  1F06               	btfss	6,6	;volatile
   492     071D  2F1F               	goto	u291
   493     071E  2F20               	goto	u290
   494     071F                     u291:
   495     071F  2EFF               	goto	l788
   496     0720                     u290:
   497     0720                     l796:
   498                           
   499                           ;newmain.c: 152:             if (!isQueueEmpty(&adcQueue)) {
   500     0720  302A               	movlw	(low (main@adcQueue| 0))& (0+255)
   501     0721  118A  2602  118A   	fcall	_isQueueEmpty
   502     0724  0870               	movf	?_isQueueEmpty,w
   503     0725  0471               	iorwf	?_isQueueEmpty+1,w
   504     0726  1D03               	btfss	3,2
   505     0727  2F29               	goto	u301
   506     0728  2F2A               	goto	u300
   507     0729                     u301:
   508     0729  2EFF               	goto	l788
   509     072A                     u300:
   510     072A                     l798:
   511                           
   512                           ;newmain.c: 153:                 adcData data = dequeue(&adcQueue);
   513     072A  302A               	movlw	(low (main@adcQueue| 0))& (0+255)
   514     072B  118A  2695  118A   	fcall	_dequeue
   515     072E  0878               	movf	?_dequeue+1,w
   516     072F  1283               	bcf	3,5	;RP0=0, select bank0
   517     0730  1303               	bcf	3,6	;RP1=0, select bank0
   518     0731  00A9               	movwf	main@data+1
   519     0732  0877               	movf	?_dequeue,w
   520     0733  00A8               	movwf	main@data
   521     0734                     l800:
   522                           
   523                           ;newmain.c: 155:                 PORTBbits.RB7 = 1;
   524     0734  1786               	bsf	6,7	;volatile
   525     0735                     l802:
   526                           
   527                           ;newmain.c: 156:                 sendParallelData(data.data);
   528     0735  0829               	movf	main@data+1,w
   529     0736  00F1               	movwf	sendParallelData@data+1
   530     0737  0828               	movf	main@data,w
   531     0738  00F0               	movwf	sendParallelData@data
   532     0739  118A  2742  118A   	fcall	_sendParallelData
   533     073C                     l804:
   534                           
   535                           ;newmain.c: 158:                 PORTBbits.RB7 = 0;
   536     073C  1283               	bcf	3,5	;RP0=0, select bank0
   537     073D  1303               	bcf	3,6	;RP1=0, select bank0
   538     073E  1386               	bcf	6,7	;volatile
   539     073F  2EFF               	goto	l788
   540     0740  118A  2800         	ljmp	start
   541     0742                     __end_of_main:
   542                           
   543                           	psect	text1
   544     0742                     __ptext1:	
   545 ;; *************** function _sendParallelData *****************
   546 ;; Defined at:
   547 ;;		line 112 in file "newmain.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;  data            2    0[COMMON] unsigned short 
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   561 ;;      Params:         2       0       0       0
   562 ;;      Locals:         0       0       0       0
   563 ;;      Temps:          3       0       0       0
   564 ;;      Totals:         5       0       0       0
   565 ;;Total ram usage:        5 bytes
   566 ;; Hardware stack levels used: 1
   567 ;; This function calls:
   568 ;;		Nothing
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574     0742                     _sendParallelData:	
   575                           ;psect for function _sendParallelData
   576                           
   577     0742                     l756:	
   578                           ;incstack = 0
   579                           ; Regs used in _sendParallelData: [wreg+status,2+status,0]
   580                           
   581                           
   582                           ;newmain.c: 113:     PORTCbits.RC0 = (data >> 0) & 1;
   583     0742  3001               	movlw	1
   584     0743  0570               	andwf	sendParallelData@data,w
   585     0744  00F2               	movwf	??_sendParallelData
   586     0745  1283               	bcf	3,5	;RP0=0, select bank0
   587     0746  1303               	bcf	3,6	;RP1=0, select bank0
   588     0747  0807               	movf	7,w	;volatile
   589     0748  0672               	xorwf	??_sendParallelData,w
   590     0749  39FE               	andlw	-2
   591     074A  0672               	xorwf	??_sendParallelData,w
   592     074B  0087               	movwf	7	;volatile
   593                           
   594                           ;newmain.c: 114:     PORTCbits.RC1 = (data >> 1) & 1;
   595     074C  0871               	movf	sendParallelData@data+1,w
   596     074D  00F3               	movwf	??_sendParallelData+1
   597     074E  0870               	movf	sendParallelData@data,w
   598     074F  00F2               	movwf	??_sendParallelData
   599     0750  1003               	clrc
   600     0751  0CF3               	rrf	??_sendParallelData+1,f
   601     0752  0CF2               	rrf	??_sendParallelData,f
   602     0753  0872               	movf	??_sendParallelData,w
   603     0754  3901               	andlw	1
   604     0755  00F4               	movwf	??_sendParallelData+2
   605     0756  0DF4               	rlf	??_sendParallelData+2,f
   606     0757  0807               	movf	7,w	;volatile
   607     0758  0674               	xorwf	??_sendParallelData+2,w
   608     0759  39FD               	andlw	-3
   609     075A  0674               	xorwf	??_sendParallelData+2,w
   610     075B  0087               	movwf	7	;volatile
   611                           
   612                           ;newmain.c: 115:     PORTCbits.RC2 = (data >> 2) & 1;
   613     075C  0871               	movf	sendParallelData@data+1,w
   614     075D  00F3               	movwf	??_sendParallelData+1
   615     075E  0870               	movf	sendParallelData@data,w
   616     075F  00F2               	movwf	??_sendParallelData
   617     0760  1003               	clrc
   618     0761  0CF3               	rrf	??_sendParallelData+1,f
   619     0762  0CF2               	rrf	??_sendParallelData,f
   620     0763  1003               	clrc
   621     0764  0CF3               	rrf	??_sendParallelData+1,f
   622     0765  0CF2               	rrf	??_sendParallelData,f
   623     0766  0872               	movf	??_sendParallelData,w
   624     0767  3901               	andlw	1
   625     0768  00F4               	movwf	??_sendParallelData+2
   626     0769  0DF4               	rlf	??_sendParallelData+2,f
   627     076A  0DF4               	rlf	??_sendParallelData+2,f
   628     076B  0807               	movf	7,w	;volatile
   629     076C  0674               	xorwf	??_sendParallelData+2,w
   630     076D  39FB               	andlw	-5
   631     076E  0674               	xorwf	??_sendParallelData+2,w
   632     076F  0087               	movwf	7	;volatile
   633                           
   634                           ;newmain.c: 116:     PORTCbits.RC5 = (data >> 3) & 1;
   635     0770  0871               	movf	sendParallelData@data+1,w
   636     0771  00F3               	movwf	??_sendParallelData+1
   637     0772  0870               	movf	sendParallelData@data,w
   638     0773  00F2               	movwf	??_sendParallelData
   639     0774  1003               	clrc
   640     0775  0CF3               	rrf	??_sendParallelData+1,f
   641     0776  0CF2               	rrf	??_sendParallelData,f
   642     0777  1003               	clrc
   643     0778  0CF3               	rrf	??_sendParallelData+1,f
   644     0779  0CF2               	rrf	??_sendParallelData,f
   645     077A  1003               	clrc
   646     077B  0CF3               	rrf	??_sendParallelData+1,f
   647     077C  0CF2               	rrf	??_sendParallelData,f
   648     077D  0872               	movf	??_sendParallelData,w
   649     077E  3901               	andlw	1
   650     077F  00F4               	movwf	??_sendParallelData+2
   651     0780  0EF4               	swapf	??_sendParallelData+2,f
   652     0781  0DF4               	rlf	??_sendParallelData+2,f
   653     0782  0807               	movf	7,w	;volatile
   654     0783  0674               	xorwf	??_sendParallelData+2,w
   655     0784  39DF               	andlw	-33
   656     0785  0674               	xorwf	??_sendParallelData+2,w
   657     0786  0087               	movwf	7	;volatile
   658                           
   659                           ;newmain.c: 117:     PORTCbits.RC4 = (data >> 4) & 1;
   660     0787  0871               	movf	sendParallelData@data+1,w
   661     0788  00F3               	movwf	??_sendParallelData+1
   662     0789  0870               	movf	sendParallelData@data,w
   663     078A  00F2               	movwf	??_sendParallelData
   664     078B  3004               	movlw	4
   665     078C                     u235:
   666     078C  1003               	clrc
   667     078D  0CF3               	rrf	??_sendParallelData+1,f
   668     078E  0CF2               	rrf	??_sendParallelData,f
   669     078F  3EFF               	addlw	-1
   670     0790  1D03               	skipz
   671     0791  2F8C               	goto	u235
   672     0792  0872               	movf	??_sendParallelData,w
   673     0793  3901               	andlw	1
   674     0794  00F4               	movwf	??_sendParallelData+2
   675     0795  0EF4               	swapf	??_sendParallelData+2,f
   676     0796  0807               	movf	7,w	;volatile
   677     0797  0674               	xorwf	??_sendParallelData+2,w
   678     0798  39EF               	andlw	-17
   679     0799  0674               	xorwf	??_sendParallelData+2,w
   680     079A  0087               	movwf	7	;volatile
   681                           
   682                           ;newmain.c: 118:     PORTCbits.RC3 = (data >> 5) & 1;
   683     079B  0871               	movf	sendParallelData@data+1,w
   684     079C  00F3               	movwf	??_sendParallelData+1
   685     079D  0870               	movf	sendParallelData@data,w
   686     079E  00F2               	movwf	??_sendParallelData
   687     079F  3005               	movlw	5
   688     07A0                     u245:
   689     07A0  1003               	clrc
   690     07A1  0CF3               	rrf	??_sendParallelData+1,f
   691     07A2  0CF2               	rrf	??_sendParallelData,f
   692     07A3  3EFF               	addlw	-1
   693     07A4  1D03               	skipz
   694     07A5  2FA0               	goto	u245
   695     07A6  0872               	movf	??_sendParallelData,w
   696     07A7  3901               	andlw	1
   697     07A8  00F4               	movwf	??_sendParallelData+2
   698     07A9  0DF4               	rlf	??_sendParallelData+2,f
   699     07AA  0DF4               	rlf	??_sendParallelData+2,f
   700     07AB  0DF4               	rlf	??_sendParallelData+2,f
   701     07AC  0807               	movf	7,w	;volatile
   702     07AD  0674               	xorwf	??_sendParallelData+2,w
   703     07AE  39F7               	andlw	-9
   704     07AF  0674               	xorwf	??_sendParallelData+2,w
   705     07B0  0087               	movwf	7	;volatile
   706                           
   707                           ;newmain.c: 119:     PORTCbits.RC6 = (data >> 6) & 1;
   708     07B1  0871               	movf	sendParallelData@data+1,w
   709     07B2  00F3               	movwf	??_sendParallelData+1
   710     07B3  0870               	movf	sendParallelData@data,w
   711     07B4  00F2               	movwf	??_sendParallelData
   712     07B5  3006               	movlw	6
   713     07B6                     u255:
   714     07B6  1003               	clrc
   715     07B7  0CF3               	rrf	??_sendParallelData+1,f
   716     07B8  0CF2               	rrf	??_sendParallelData,f
   717     07B9  3EFF               	addlw	-1
   718     07BA  1D03               	skipz
   719     07BB  2FB6               	goto	u255
   720     07BC  0872               	movf	??_sendParallelData,w
   721     07BD  3901               	andlw	1
   722     07BE  00F4               	movwf	??_sendParallelData+2
   723     07BF  0EF4               	swapf	??_sendParallelData+2,f
   724     07C0  0DF4               	rlf	??_sendParallelData+2,f
   725     07C1  0DF4               	rlf	??_sendParallelData+2,f
   726     07C2  0807               	movf	7,w	;volatile
   727     07C3  0674               	xorwf	??_sendParallelData+2,w
   728     07C4  39BF               	andlw	-65
   729     07C5  0674               	xorwf	??_sendParallelData+2,w
   730     07C6  0087               	movwf	7	;volatile
   731                           
   732                           ;newmain.c: 120:     PORTCbits.RC7 = (data >> 7) & 1;
   733     07C7  0871               	movf	sendParallelData@data+1,w
   734     07C8  00F3               	movwf	??_sendParallelData+1
   735     07C9  0870               	movf	sendParallelData@data,w
   736     07CA  00F2               	movwf	??_sendParallelData
   737     07CB  3007               	movlw	7
   738     07CC                     u265:
   739     07CC  1003               	clrc
   740     07CD  0CF3               	rrf	??_sendParallelData+1,f
   741     07CE  0CF2               	rrf	??_sendParallelData,f
   742     07CF  3EFF               	addlw	-1
   743     07D0  1D03               	skipz
   744     07D1  2FCC               	goto	u265
   745     07D2  0872               	movf	??_sendParallelData,w
   746     07D3  3901               	andlw	1
   747     07D4  00F4               	movwf	??_sendParallelData+2
   748     07D5  0CF4               	rrf	??_sendParallelData+2,f
   749     07D6  0CF4               	rrf	??_sendParallelData+2,f
   750     07D7  0807               	movf	7,w	;volatile
   751     07D8  0674               	xorwf	??_sendParallelData+2,w
   752     07D9  397F               	andlw	-129
   753     07DA  0674               	xorwf	??_sendParallelData+2,w
   754     07DB  0087               	movwf	7	;volatile
   755                           
   756                           ;newmain.c: 121:     PORTBbits.RB4 = (data >> 8) & 1;
   757     07DC  0871               	movf	sendParallelData@data+1,w
   758     07DD  3901               	andlw	1
   759     07DE  00F2               	movwf	??_sendParallelData
   760     07DF  0EF2               	swapf	??_sendParallelData,f
   761     07E0  0806               	movf	6,w	;volatile
   762     07E1  0672               	xorwf	??_sendParallelData,w
   763     07E2  39EF               	andlw	-17
   764     07E3  0672               	xorwf	??_sendParallelData,w
   765     07E4  0086               	movwf	6	;volatile
   766                           
   767                           ;newmain.c: 122:     PORTBbits.RB5 = (data >> 9) & 1;
   768     07E5  0871               	movf	sendParallelData@data+1,w
   769     07E6  00F3               	movwf	??_sendParallelData+1
   770     07E7  0870               	movf	sendParallelData@data,w
   771     07E8  00F2               	movwf	??_sendParallelData
   772     07E9  3009               	movlw	9
   773     07EA                     u275:
   774     07EA  1003               	clrc
   775     07EB  0CF3               	rrf	??_sendParallelData+1,f
   776     07EC  0CF2               	rrf	??_sendParallelData,f
   777     07ED  3EFF               	addlw	-1
   778     07EE  1D03               	skipz
   779     07EF  2FEA               	goto	u275
   780     07F0  0872               	movf	??_sendParallelData,w
   781     07F1  3901               	andlw	1
   782     07F2  00F4               	movwf	??_sendParallelData+2
   783     07F3  0EF4               	swapf	??_sendParallelData+2,f
   784     07F4  0DF4               	rlf	??_sendParallelData+2,f
   785     07F5  0806               	movf	6,w	;volatile
   786     07F6  0674               	xorwf	??_sendParallelData+2,w
   787     07F7  39DF               	andlw	-33
   788     07F8  0674               	xorwf	??_sendParallelData+2,w
   789     07F9  0086               	movwf	6	;volatile
   790     07FA                     l55:
   791     07FA  0008               	return
   792     07FB                     __end_of_sendParallelData:
   793                           
   794                           	psect	text2
   795     05ED                     __ptext2:	
   796 ;; *************** function _initQueue *****************
   797 ;; Defined at:
   798 ;;		line 58 in file "newmain.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  q               1    wreg     PTR struct .
   801 ;;		 -> main@adcQueue(38), 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  q               1    0[COMMON] PTR struct .
   804 ;;		 -> main@adcQueue(38), 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   814 ;;      Params:         0       0       0       0
   815 ;;      Locals:         1       0       0       0
   816 ;;      Temps:          0       0       0       0
   817 ;;      Totals:         1       0       0       0
   818 ;;Total ram usage:        1 bytes
   819 ;; Hardware stack levels used: 1
   820 ;; This function calls:
   821 ;;		Nothing
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827     05ED                     _initQueue:	
   828                           ;psect for function _initQueue
   829                           
   830                           
   831                           ;incstack = 0
   832                           ; Regs used in _initQueue: [wreg-fsr0h+status,2+status,0]
   833                           ;initQueue@q stored from wreg
   834     05ED  00F0               	movwf	initQueue@q
   835     05EE                     l716:
   836                           
   837                           ;newmain.c: 59:     q->head = 0;
   838     05EE  0870               	movf	initQueue@q,w
   839     05EF  3E20               	addlw	32
   840     05F0  0084               	movwf	4
   841     05F1  1383               	bcf	3,7	;select IRP bank0
   842     05F2  0180               	clrf	0
   843     05F3  0A84               	incf	4,f
   844     05F4  0180               	clrf	0
   845                           
   846                           ;newmain.c: 60:     q->tail = 0;
   847     05F5  0870               	movf	initQueue@q,w
   848     05F6  3E22               	addlw	34
   849     05F7  0084               	movwf	4
   850     05F8  0180               	clrf	0
   851     05F9  0A84               	incf	4,f
   852     05FA  0180               	clrf	0
   853                           
   854                           ;newmain.c: 61:     q->count = 0;
   855     05FB  0870               	movf	initQueue@q,w
   856     05FC  3E24               	addlw	36
   857     05FD  0084               	movwf	4
   858     05FE  0180               	clrf	0
   859     05FF  0A84               	incf	4,f
   860     0600  0180               	clrf	0
   861     0601                     l27:
   862     0601  0008               	return
   863     0602                     __end_of_initQueue:
   864                           
   865                           	psect	text3
   866     0651                     __ptext3:	
   867 ;; *************** function _enqueue *****************
   868 ;; Defined at:
   869 ;;		line 72 in file "newmain.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  q               1    wreg     PTR struct .
   872 ;;		 -> main@adcQueue(38), 
   873 ;;  data            2    7[COMMON] struct .
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  q               1    9[COMMON] PTR struct .
   876 ;;		 -> main@adcQueue(38), 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   886 ;;      Params:         2       0       0       0
   887 ;;      Locals:         1       0       0       0
   888 ;;      Temps:          0       6       0       0
   889 ;;      Totals:         3       6       0       0
   890 ;;Total ram usage:        9 bytes
   891 ;; Hardware stack levels used: 1
   892 ;; Hardware stack levels required when called: 1
   893 ;; This function calls:
   894 ;;		_isQueueFull
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900     0651                     _enqueue:	
   901                           ;psect for function _enqueue
   902                           
   903                           
   904                           ;incstack = 0
   905                           ; Regs used in _enqueue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   906                           ;enqueue@q stored from wreg
   907     0651  00F9               	movwf	enqueue@q
   908     0652                     l718:
   909                           
   910                           ;newmain.c: 73:     if (!isQueueFull(q)) {
   911     0652  0879               	movf	enqueue@q,w
   912     0653  118A  261B  118A   	fcall	_isQueueFull
   913     0656  0870               	movf	?_isQueueFull,w
   914     0657  0471               	iorwf	?_isQueueFull+1,w
   915     0658  1D03               	btfss	3,2
   916     0659  2E5B               	goto	u201
   917     065A  2E5C               	goto	u200
   918     065B                     u201:
   919     065B  2E94               	goto	l37
   920     065C                     u200:
   921     065C                     l720:
   922                           
   923                           ;newmain.c: 74:         q->buffer[q->tail] = data;
   924     065C  0879               	movf	enqueue@q,w
   925     065D  3E22               	addlw	34
   926     065E  0084               	movwf	4
   927     065F  1383               	bcf	3,7	;select IRP bank0
   928     0660  0800               	movf	0,w
   929     0661  1283               	bcf	3,5	;RP0=0, select bank0
   930     0662  1303               	bcf	3,6	;RP1=0, select bank0
   931     0663  00A0               	movwf	??_enqueue
   932     0664  0720               	addwf	??_enqueue,w
   933     0665  0779               	addwf	enqueue@q,w
   934     0666  00A1               	movwf	??_enqueue+1
   935     0667  0821               	movf	??_enqueue+1,w
   936     0668  0084               	movwf	4
   937     0669  0877               	movf	enqueue@data,w
   938     066A  0080               	movwf	0
   939     066B  0A84               	incf	4,f
   940     066C  0878               	movf	enqueue@data+1,w
   941     066D  0080               	movwf	0
   942                           
   943                           ;newmain.c: 75:         q->tail = (q->tail + 1) % 16;
   944     066E  0879               	movf	enqueue@q,w
   945     066F  3E22               	addlw	34
   946     0670  0084               	movwf	4
   947     0671  0800               	movf	0,w
   948     0672  00A0               	movwf	??_enqueue
   949     0673  0A84               	incf	4,f
   950     0674  0800               	movf	0,w
   951     0675  00A1               	movwf	??_enqueue+1
   952     0676  0820               	movf	??_enqueue,w
   953     0677  3E01               	addlw	1
   954     0678  00A2               	movwf	??_enqueue+2
   955     0679  0821               	movf	??_enqueue+1,w
   956     067A  1803               	skipnc
   957     067B  3E01               	addlw	1
   958     067C  3E00               	addlw	0
   959     067D  00A3               	movwf	??_enqueue+3
   960     067E  300F               	movlw	15
   961     067F  0522               	andwf	??_enqueue+2,w
   962     0680  00A4               	movwf	??_enqueue+4
   963     0681  3000               	movlw	0
   964     0682  0523               	andwf	??_enqueue+3,w
   965     0683  00A5               	movwf	??_enqueue+5
   966     0684  0879               	movf	enqueue@q,w
   967     0685  3E22               	addlw	34
   968     0686  0084               	movwf	4
   969     0687  0824               	movf	??_enqueue+4,w
   970     0688  0080               	movwf	0
   971     0689  0A84               	incf	4,f
   972     068A  0825               	movf	??_enqueue+5,w
   973     068B  0080               	movwf	0
   974                           
   975                           ;newmain.c: 76:         q->count++;
   976     068C  0879               	movf	enqueue@q,w
   977     068D  3E24               	addlw	36
   978     068E  0084               	movwf	4
   979     068F  3001               	movlw	1
   980     0690  0780               	addwf	0,f
   981     0691  0A84               	incf	4,f
   982     0692  1803               	skipnc
   983     0693  0A80               	incf	0,f
   984     0694                     l37:
   985     0694  0008               	return
   986     0695                     __end_of_enqueue:
   987                           
   988                           	psect	text4
   989     061B                     __ptext4:	
   990 ;; *************** function _isQueueFull *****************
   991 ;; Defined at:
   992 ;;		line 64 in file "newmain.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  q               1    wreg     PTR struct .
   995 ;;		 -> main@adcQueue(38), 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  q               1    6[COMMON] PTR struct .
   998 ;;		 -> main@adcQueue(38), 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  2    0[COMMON] int 
  1001 ;; Registers used:
  1002 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1008 ;;      Params:         2       0       0       0
  1009 ;;      Locals:         1       0       0       0
  1010 ;;      Temps:          4       0       0       0
  1011 ;;      Totals:         7       0       0       0
  1012 ;;Total ram usage:        7 bytes
  1013 ;; Hardware stack levels used: 1
  1014 ;; This function calls:
  1015 ;;		Nothing
  1016 ;; This function is called by:
  1017 ;;		_enqueue
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022     061B                     _isQueueFull:	
  1023                           ;psect for function _isQueueFull
  1024                           
  1025                           
  1026                           ;incstack = 0
  1027                           ; Regs used in _isQueueFull: [wreg-fsr0h+status,2+status,0]
  1028                           ;isQueueFull@q stored from wreg
  1029     061B  00F6               	movwf	isQueueFull@q
  1030     061C                     l708:
  1031                           
  1032                           ;newmain.c: 65:     return q->count == 16;
  1033     061C  0876               	movf	isQueueFull@q,w
  1034     061D  3E24               	addlw	36
  1035     061E  0084               	movwf	4
  1036     061F  1383               	bcf	3,7	;select IRP bank0
  1037     0620  0800               	movf	0,w
  1038     0621  00F2               	movwf	??_isQueueFull
  1039     0622  0A84               	incf	4,f
  1040     0623  0800               	movf	0,w
  1041     0624  00F3               	movwf	??_isQueueFull+1
  1042     0625  3010               	movlw	16
  1043     0626  0672               	xorwf	??_isQueueFull,w
  1044     0627  0473               	iorwf	??_isQueueFull+1,w
  1045     0628  1903               	btfsc	3,2
  1046     0629  2E2B               	goto	u161
  1047     062A  2E2D               	goto	u160
  1048     062B                     u161:
  1049     062B  3001               	movlw	1
  1050     062C  2E2E               	goto	u170
  1051     062D                     u160:
  1052     062D  3000               	movlw	0
  1053     062E                     u170:
  1054     062E  00F4               	movwf	??_isQueueFull+2
  1055     062F  01F5               	clrf	??_isQueueFull+3
  1056     0630  0874               	movf	??_isQueueFull+2,w
  1057     0631  00F0               	movwf	?_isQueueFull
  1058     0632  0875               	movf	??_isQueueFull+3,w
  1059     0633  00F1               	movwf	?_isQueueFull+1
  1060     0634                     l30:
  1061     0634  0008               	return
  1062     0635                     __end_of_isQueueFull:
  1063                           
  1064                           	psect	text5
  1065     0695                     __ptext5:	
  1066 ;; *************** function _dequeue *****************
  1067 ;; Defined at:
  1068 ;;		line 80 in file "newmain.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;  q               1    wreg     PTR struct .
  1071 ;;		 -> main@adcQueue(38), 
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;  q               1   11[COMMON] PTR struct .
  1074 ;;		 -> main@adcQueue(38), 
  1075 ;;  data            2    9[COMMON] struct .
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  2    7[COMMON] struct .
  1078 ;; Registers used:
  1079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1085 ;;      Params:         2       0       0       0
  1086 ;;      Locals:         3       0       0       0
  1087 ;;      Temps:          0       6       0       0
  1088 ;;      Totals:         5       6       0       0
  1089 ;;Total ram usage:       11 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; Hardware stack levels required when called: 1
  1092 ;; This function calls:
  1093 ;;		_isQueueEmpty
  1094 ;; This function is called by:
  1095 ;;		_main
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099     0695                     _dequeue:	
  1100                           ;psect for function _dequeue
  1101                           
  1102                           
  1103                           ;incstack = 0
  1104                           ; Regs used in _dequeue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1105                           ;dequeue@q stored from wreg
  1106     0695  00FB               	movwf	dequeue@q
  1107     0696                     l722:
  1108                           
  1109                           ;newmain.c: 81:     adcData data = {0};
  1110     0696  087D               	movf	dequeue@F1642+1,w
  1111     0697  00FA               	movwf	dequeue@data+1
  1112     0698  087C               	movf	dequeue@F1642,w
  1113     0699  00F9               	movwf	dequeue@data
  1114     069A                     l724:
  1115                           
  1116                           ;newmain.c: 82:     if (!isQueueEmpty(q)) {
  1117     069A  087B               	movf	dequeue@q,w
  1118     069B  118A  2602  118A   	fcall	_isQueueEmpty
  1119     069E  0870               	movf	?_isQueueEmpty,w
  1120     069F  0471               	iorwf	?_isQueueEmpty+1,w
  1121     06A0  1D03               	btfss	3,2
  1122     06A1  2EA3               	goto	u211
  1123     06A2  2EA4               	goto	u210
  1124     06A3                     u211:
  1125     06A3  2EE2               	goto	l730
  1126     06A4                     u210:
  1127     06A4                     l726:
  1128                           
  1129                           ;newmain.c: 83:         data = q->buffer[q->head];
  1130     06A4  087B               	movf	dequeue@q,w
  1131     06A5  3E20               	addlw	32
  1132     06A6  0084               	movwf	4
  1133     06A7  1383               	bcf	3,7	;select IRP bank0
  1134     06A8  0800               	movf	0,w
  1135     06A9  1283               	bcf	3,5	;RP0=0, select bank0
  1136     06AA  1303               	bcf	3,6	;RP1=0, select bank0
  1137     06AB  00A0               	movwf	??_dequeue
  1138     06AC  0720               	addwf	??_dequeue,w
  1139     06AD  077B               	addwf	dequeue@q,w
  1140     06AE  00A1               	movwf	??_dequeue+1
  1141     06AF  0821               	movf	??_dequeue+1,w
  1142     06B0  0084               	movwf	4
  1143     06B1  0800               	movf	0,w
  1144     06B2  00F9               	movwf	dequeue@data
  1145     06B3  0A84               	incf	4,f
  1146     06B4  0800               	movf	0,w
  1147     06B5  00FA               	movwf	dequeue@data+1
  1148                           
  1149                           ;newmain.c: 84:         q->head = (q->head + 1) % 16;
  1150     06B6  087B               	movf	dequeue@q,w
  1151     06B7  3E20               	addlw	32
  1152     06B8  0084               	movwf	4
  1153     06B9  0800               	movf	0,w
  1154     06BA  00A0               	movwf	??_dequeue
  1155     06BB  0A84               	incf	4,f
  1156     06BC  0800               	movf	0,w
  1157     06BD  00A1               	movwf	??_dequeue+1
  1158     06BE  0820               	movf	??_dequeue,w
  1159     06BF  3E01               	addlw	1
  1160     06C0  00A2               	movwf	??_dequeue+2
  1161     06C1  0821               	movf	??_dequeue+1,w
  1162     06C2  1803               	skipnc
  1163     06C3  3E01               	addlw	1
  1164     06C4  3E00               	addlw	0
  1165     06C5  00A3               	movwf	??_dequeue+3
  1166     06C6  300F               	movlw	15
  1167     06C7  0522               	andwf	??_dequeue+2,w
  1168     06C8  00A4               	movwf	??_dequeue+4
  1169     06C9  3000               	movlw	0
  1170     06CA  0523               	andwf	??_dequeue+3,w
  1171     06CB  00A5               	movwf	??_dequeue+5
  1172     06CC  087B               	movf	dequeue@q,w
  1173     06CD  3E20               	addlw	32
  1174     06CE  0084               	movwf	4
  1175     06CF  0824               	movf	??_dequeue+4,w
  1176     06D0  0080               	movwf	0
  1177     06D1  0A84               	incf	4,f
  1178     06D2  0825               	movf	??_dequeue+5,w
  1179     06D3  0080               	movwf	0
  1180     06D4                     l728:
  1181                           
  1182                           ;newmain.c: 85:         q->count--;
  1183     06D4  087B               	movf	dequeue@q,w
  1184     06D5  3E24               	addlw	36
  1185     06D6  0084               	movwf	4
  1186     06D7  30FF               	movlw	255
  1187     06D8  0780               	addwf	0,f
  1188     06D9  0F84               	incfsz	4,f
  1189     06DA  0800               	movf	0,w
  1190     06DB  1803               	skipnc
  1191     06DC  0A00               	incf	0,w
  1192     06DD  00FF               	movwf	btemp+1
  1193     06DE  30FF               	movlw	255
  1194     06DF  077F               	addwf	btemp+1,w
  1195     06E0  0080               	movwf	0
  1196     06E1  0384               	decf	4,f
  1197     06E2                     l730:
  1198                           
  1199                           ;newmain.c: 87:     return data;
  1200     06E2  087A               	movf	dequeue@data+1,w
  1201     06E3  00F8               	movwf	?_dequeue+1
  1202     06E4  0879               	movf	dequeue@data,w
  1203     06E5  00F7               	movwf	?_dequeue
  1204     06E6                     l43:
  1205     06E6  0008               	return
  1206     06E7                     __end_of_dequeue:
  1207                           
  1208                           	psect	text6
  1209     0602                     __ptext6:	
  1210 ;; *************** function _isQueueEmpty *****************
  1211 ;; Defined at:
  1212 ;;		line 68 in file "newmain.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  q               1    wreg     PTR struct .
  1215 ;;		 -> main@adcQueue(38), 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  q               1    6[COMMON] PTR struct .
  1218 ;;		 -> main@adcQueue(38), 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  2    0[COMMON] int 
  1221 ;; Registers used:
  1222 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1228 ;;      Params:         2       0       0       0
  1229 ;;      Locals:         1       0       0       0
  1230 ;;      Temps:          4       0       0       0
  1231 ;;      Totals:         7       0       0       0
  1232 ;;Total ram usage:        7 bytes
  1233 ;; Hardware stack levels used: 1
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_dequeue
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242     0602                     _isQueueEmpty:	
  1243                           ;psect for function _isQueueEmpty
  1244                           
  1245                           
  1246                           ;incstack = 0
  1247                           ; Regs used in _isQueueEmpty: [wreg-fsr0h+status,2+status,0]
  1248                           ;isQueueEmpty@q stored from wreg
  1249     0602  00F6               	movwf	isQueueEmpty@q
  1250     0603                     l712:
  1251                           
  1252                           ;newmain.c: 69:     return q->count == 0;
  1253     0603  0876               	movf	isQueueEmpty@q,w
  1254     0604  3E24               	addlw	36
  1255     0605  0084               	movwf	4
  1256     0606  1383               	bcf	3,7	;select IRP bank0
  1257     0607  0800               	movf	0,w
  1258     0608  00F2               	movwf	??_isQueueEmpty
  1259     0609  0A84               	incf	4,f
  1260     060A  0800               	movf	0,w
  1261     060B  00F3               	movwf	??_isQueueEmpty+1
  1262     060C  0872               	movf	??_isQueueEmpty,w
  1263     060D  0473               	iorwf	??_isQueueEmpty+1,w
  1264     060E  1903               	btfsc	3,2
  1265     060F  2E11               	goto	u181
  1266     0610  2E13               	goto	u180
  1267     0611                     u181:
  1268     0611  3001               	movlw	1
  1269     0612  2E14               	goto	u190
  1270     0613                     u180:
  1271     0613  3000               	movlw	0
  1272     0614                     u190:
  1273     0614  00F4               	movwf	??_isQueueEmpty+2
  1274     0615  01F5               	clrf	??_isQueueEmpty+3
  1275     0616  0874               	movf	??_isQueueEmpty+2,w
  1276     0617  00F0               	movwf	?_isQueueEmpty
  1277     0618  0875               	movf	??_isQueueEmpty+3,w
  1278     0619  00F1               	movwf	?_isQueueEmpty+1
  1279     061A                     l33:
  1280     061A  0008               	return
  1281     061B                     __end_of_isQueueEmpty:
  1282                           
  1283                           	psect	text7
  1284     05DB                     __ptext7:	
  1285 ;; *************** function _ADC_Read *****************
  1286 ;; Defined at:
  1287 ;;		line 104 in file "newmain.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;		None
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  result          2    2[COMMON] struct .
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  2    0[COMMON] struct .
  1294 ;; Registers used:
  1295 ;;		wreg
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1301 ;;      Params:         2       0       0       0
  1302 ;;      Locals:         2       0       0       0
  1303 ;;      Temps:          0       0       0       0
  1304 ;;      Totals:         4       0       0       0
  1305 ;;Total ram usage:        4 bytes
  1306 ;; Hardware stack levels used: 1
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314     05DB                     _ADC_Read:	
  1315                           ;psect for function _ADC_Read
  1316                           
  1317     05DB                     l750:	
  1318                           ;incstack = 0
  1319                           ; Regs used in _ADC_Read: [wreg]
  1320                           
  1321                           
  1322                           ;newmain.c: 105:     ADCON0bits.GO = 1;
  1323     05DB  1283               	bcf	3,5	;RP0=0, select bank0
  1324     05DC  1303               	bcf	3,6	;RP1=0, select bank0
  1325     05DD  149F               	bsf	31,1	;volatile
  1326     05DE                     l49:	
  1327                           ;newmain.c: 106:     while (ADCON0bits.GO_nDONE);
  1328                           
  1329     05DE  189F               	btfsc	31,1	;volatile
  1330     05DF  2DE1               	goto	u221
  1331     05E0  2DE2               	goto	u220
  1332     05E1                     u221:
  1333     05E1  2DDE               	goto	l49
  1334     05E2                     u220:
  1335     05E2                     l752:
  1336                           
  1337                           ;newmain.c: 107:     adcData result;;newmain.c: 108:     result.data = ((unsigned short)
      +                          ADRESH << 8) | ADRESL;
  1338     05E2  081E               	movf	30,w	;volatile
  1339     05E3  00F3               	movwf	ADC_Read@result+1
  1340     05E4  1683               	bsf	3,5	;RP0=1, select bank1
  1341     05E5  1303               	bcf	3,6	;RP1=0, select bank1
  1342     05E6  081E               	movf	30,w	;volatile
  1343     05E7  00F2               	movwf	ADC_Read@result
  1344                           
  1345                           ;newmain.c: 109:     return result;
  1346     05E8  0873               	movf	ADC_Read@result+1,w
  1347     05E9  00F1               	movwf	?_ADC_Read+1
  1348     05EA  0872               	movf	ADC_Read@result,w
  1349     05EB  00F0               	movwf	?_ADC_Read
  1350     05EC                     l52:
  1351     05EC  0008               	return
  1352     05ED                     __end_of_ADC_Read:
  1353                           
  1354                           	psect	text8
  1355     0635                     __ptext8:	
  1356 ;; *************** function _ADC_Init *****************
  1357 ;; Defined at:
  1358 ;;		line 91 in file "newmain.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1372 ;;      Params:         0       0       0       0
  1373 ;;      Locals:         0       0       0       0
  1374 ;;      Temps:          0       0       0       0
  1375 ;;      Totals:         0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used: 1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385     0635                     _ADC_Init:	
  1386                           ;psect for function _ADC_Init
  1387                           
  1388     0635                     l734:	
  1389                           ;incstack = 0
  1390                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  1391                           
  1392                           
  1393                           ;newmain.c: 92:     ANSEL = 0x00;
  1394     0635  1283               	bcf	3,5	;RP0=0, select bank2
  1395     0636  1703               	bsf	3,6	;RP1=1, select bank2
  1396     0637  019E               	clrf	30	;volatile
  1397                           
  1398                           ;newmain.c: 93:     ANSELH = 0x00;
  1399     0638  019F               	clrf	31	;volatile
  1400     0639                     l736:
  1401                           
  1402                           ;newmain.c: 94:     TRISAbits.TRISA2 = 1;
  1403     0639  1683               	bsf	3,5	;RP0=1, select bank1
  1404     063A  1303               	bcf	3,6	;RP1=0, select bank1
  1405     063B  1505               	bsf	5,2	;volatile
  1406     063C                     l738:
  1407                           
  1408                           ;newmain.c: 95:     ANSELbits.ANS2 = 1;
  1409     063C  1283               	bcf	3,5	;RP0=0, select bank2
  1410     063D  1703               	bsf	3,6	;RP1=1, select bank2
  1411     063E  151E               	bsf	30,2	;volatile
  1412     063F                     l740:
  1413                           
  1414                           ;newmain.c: 96:     ADCON0bits.CHS = 2;
  1415     063F  1283               	bcf	3,5	;RP0=0, select bank0
  1416     0640  1303               	bcf	3,6	;RP1=0, select bank0
  1417     0641  081F               	movf	31,w	;volatile
  1418     0642  39C3               	andlw	-61
  1419     0643  3808               	iorlw	8
  1420     0644  009F               	movwf	31	;volatile
  1421     0645                     l742:
  1422                           
  1423                           ;newmain.c: 97:     ADCON1bits.ADCS = 0b001;
  1424     0645  1683               	bsf	3,5	;RP0=1, select bank1
  1425     0646  1303               	bcf	3,6	;RP1=0, select bank1
  1426     0647  081F               	movf	31,w	;volatile
  1427     0648  398F               	andlw	-113
  1428     0649  3810               	iorlw	16
  1429     064A  009F               	movwf	31	;volatile
  1430     064B                     l744:
  1431                           
  1432                           ;newmain.c: 98:     ADCON0bits.ADFM = 1;
  1433     064B  1283               	bcf	3,5	;RP0=0, select bank0
  1434     064C  1303               	bcf	3,6	;RP1=0, select bank0
  1435     064D  179F               	bsf	31,7	;volatile
  1436     064E                     l746:
  1437                           
  1438                           ;newmain.c: 99:     ADCON0bits.ADON = 1;
  1439     064E  141F               	bsf	31,0	;volatile
  1440     064F                     l748:
  1441                           
  1442                           ;newmain.c: 100:     ADCON0bits.VCFG = 0;
  1443     064F  131F               	bcf	31,6	;volatile
  1444     0650                     l46:
  1445     0650  0008               	return
  1446     0651                     __end_of_ADC_Init:
  1447     007E                     btemp	set	126	;btemp
  1448     007E                     wtemp0	set	126
  1449                           
  1450                           	psect	config
  1451                           
  1452                           ;Config register CONFIG @ 0x2007
  1453                           ;	Oscillator Selection bits
  1454                           ;	FOSC = INTRCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function
      +                           on RA5/OSC1/CLKIN
  1455                           ;	Watchdog Timer Enable bit
  1456                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1457                           ;	Power-up Timer Enable bit
  1458                           ;	PWRTE = OFF, PWRT disabled
  1459                           ;	MCLR Pin Function Select bit
  1460                           ;	MCLRE = ON, MCLR pin function is MCLR
  1461                           ;	Code Protection bit
  1462                           ;	CP = OFF, Program memory code protection is disabled
  1463                           ;	Data Code Protection bit
  1464                           ;	CPD = OFF, Data memory code protection is disabled
  1465                           ;	Brown-out Reset Selection bits
  1466                           ;	BOREN = OFF, BOR disabled
  1467                           ;	Internal External Switchover bit
  1468                           ;	IESO = OFF, Internal External Switchover mode is disabled
  1469                           ;	Fail-Safe Clock Monitor Enabled bit
  1470                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1471     2007                     	org	8199
  1472     2007  30F4               	dw	12532

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     48      48
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    dequeue@q	PTR struct . size(1) Largest target is 38
		 -> main@adcQueue(BANK0[38]), 

    enqueue@q	PTR struct . size(1) Largest target is 38
		 -> main@adcQueue(BANK0[38]), 

    initQueue@q	PTR struct . size(1) Largest target is 38
		 -> main@adcQueue(BANK0[38]), 

    isQueueEmpty@q	PTR struct . size(1) Largest target is 38
		 -> main@adcQueue(BANK0[38]), 

    isQueueFull@q	PTR struct . size(1) Largest target is 38
		 -> main@adcQueue(BANK0[38]), 


Critical Paths under _main in COMMON

    _main->_dequeue
    _enqueue->_isQueueFull
    _dequeue->_isQueueEmpty

Critical Paths under _main in BANK0

    _main->_dequeue
    _main->_enqueue

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0    1401
                                              6 BANK0     42    42      0
                           _ADC_Init
                           _ADC_Read
                            _dequeue
                            _enqueue
                          _initQueue
                       _isQueueEmpty
                        _isQueueFull
                   _sendParallelData
 ---------------------------------------------------------------------------------
 (1) _sendParallelData                                     5     3      2     296
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initQueue                                            1     1      0      99
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _enqueue                                              9     7      2     351
                                              7 COMMON     3     1      2
                                              0 BANK0      6     6      0
                        _isQueueFull
 ---------------------------------------------------------------------------------
 (1) _isQueueFull                                          7     5      2      88
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _dequeue                                             11     9      2     277
                                              7 COMMON     5     3      2
                                              0 BANK0      6     6      0
                       _isQueueEmpty
 ---------------------------------------------------------------------------------
 (1) _isQueueEmpty                                         7     5      2      88
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _dequeue
     _isQueueEmpty
   _enqueue
     _isQueueFull
   _initQueue
   _isQueueEmpty
   _isQueueFull
   _sendParallelData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     30      30       3       60.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      3E       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      3E      10        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Oct 28 14:55:39 2024

                      l30 0634                        l33 061A                        l43 06E6  
                      l27 0601                        l52 05EC                        l37 0694  
                      l46 0650                        l55 07FA                        l49 05DE  
                     l712 0603                       l720 065C                       l800 0734  
                     l730 06E2                       l722 0696                       l802 0735  
                     l740 063F                       l724 069A                       l708 061C  
                     l716 05EE                       l804 073C                       l742 0645  
                     l734 0635                       l750 05DB                       l726 06A4  
                     l718 0652                       l744 064B                       l736 0639  
                     l752 05E2                       l728 06D4                       l760 06EA  
                     l746 064E                       l738 063C                       l770 06F4  
                     l762 06EE                       l748 064F                       l756 0742  
                     l780 06F9                       l772 06F5                       l764 06F1  
                     l790 0709                       l782 06FA                       l774 06F6  
                     l766 06F2                       l758 06E7                       l792 0712  
                     l784 06FB                       l776 06F7                       l768 06F3  
                     l794 071A                       l786 06FC                       l778 06F8  
                     l796 0720                       l788 06FF                       l798 072A  
                     u200 065C                       u201 065B                       u210 06A4  
                     u211 06A3                       u220 05E2                       u300 072A  
                     u221 05E1                       u301 0729                       u160 062D  
                     u161 062B                       u170 062E                       u235 078C  
                     u180 0613                       u181 0611                       u245 07A0  
                     u190 0614                       u255 07B6                       u280 0709  
                     u265 07CC                       u281 0708                       u290 0720  
                     u275 07EA                       u291 071F                       fsr0 0004  
                     indf 0000              ?_isQueueFull 0070                      _main 06E7  
                    btemp 007E          __end_of_ADC_Init 0651          __end_of_ADC_Read 05ED  
            main@adcValue 0026              main@adcQueue 002A                      start 0000  
           ?_isQueueEmpty 0070                     ?_main 0070                     _ANSEL 011E  
         __end_of_dequeue 06E7           __end_of_enqueue 0695                     status 0003  
                   wtemp0 007E           __initialization 07FB              __end_of_main 0742  
          ??_isQueueEmpty 0072                    ??_main 007C               enqueue@data 0077  
                  _ADRESH 001E                    _ADRESL 009E                    _ANSELH 011F  
               ??_dequeue 0020                 ??_enqueue 0020                 ?_ADC_Init 0070  
               ?_ADC_Read 0070              isQueueFull@q 0076   __end_of__initialization 07FD  
          __pcstackCOMMON 0070                ??_ADC_Init 0070                ??_ADC_Read 0072  
    __end_of_isQueueEmpty 061B                __pmaintext 06E7          _sendParallelData 0742  
               _ANSELbits 011E                   __ptext1 0742                   __ptext2 05ED  
                 __ptext3 0651                   __ptext4 061B                   __ptext5 0695  
                 __ptext6 0602                   __ptext7 05DB                   __ptext8 0635  
                 _dequeue 0695         __end_of_initQueue 0602                   _enqueue 0651  
    end_of_initialization 07FD             isQueueEmpty@q 0076                 _PORTBbits 0006  
               _PORTCbits 0007                 _TRISAbits 0085                 _TRISBbits 0086  
               _TRISCbits 0087              _isQueueEmpty 0602       start_initialization 07FB  
           ??_isQueueFull 0072                initQueue@q 0070            ADC_Read@result 0072  
             __pbssCOMMON 007C                 ___latbits 0001      sendParallelData@data 0070  
           __pcstackBANK0 0020  __end_of_sendParallelData 07FB       __end_of_isQueueFull 0635  
                ?_dequeue 0077                  ?_enqueue 0077                  _ADC_Init 0635  
                _ADC_Read 05DB                 _initQueue 05ED                _ADCON0bits 001F  
              _ADCON1bits 009F                ?_initQueue 0070               _isQueueFull 061B  
                dequeue@q 007B                  main@data 0028                  enqueue@q 0079  
             ??_initQueue 0070         ?_sendParallelData 0070        ??_sendParallelData 0072  
            dequeue@F1642 007C               dequeue@data 0079  
